"""
Add custom attributes to objects to describe various custom nodes. These user
properties are stored in a way that they are to be parsed by Unity's
AssetPostprocessor in order to transport a rig into Unity for evaluation at
run-time.

\b Requirements: Unity Pro with ImportMayaRigs.cs editor script and all its
dependencies.

\par Supported node types:
	- am_exposeTransform
	- am_hipConstraint
	- am_shoulderConstraint

\b Creation \b Info:

\b Donations: http://adammechtley.com/donations/

\b License: The MIT License

Copyright (c) 2011 Adam Mechtley (http://adammechtley.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

\namespace amTools.unity.rigs.customNodes
"""

import maya.cmds as cmds
import amTools.utilities.unity as util
reload(util)

def exportNodes():
	"""Add user properties for all supported node types."""
	doExposeTransforms()
	doShoulderConstraints()
	doHipConstraints()

def doExposeTransforms():
	"""Adds user properties to objects with am_exposeTransform nodes."""
	# a list of attributes to extract
	attributeList = [u'reference', u'rotateOrder', u'objectAxis', u'referenceAxis']
	try:
		nodes = cmds.ls(type='am_exposeTransform')
		for node in nodes:
			util.addAttributeValues(cmds.am_exposeTransform(node, q=True, object=True), node, attributeList)
	except: pass

def doShoulderConstraints():
	"""Adds user properties to objects with am_shoulderConstraint nodes."""
	# a list of attributes to extract
	attributeList = [u'raisedAngleOffset', u'shoulder', u'shoulderAimAxis',
		u'shoulderFrontAxis', u'spine', u'spineAimAxis', u'spineFrontAxis']
	try:
		nodes = cmds.ls(type='am_shoulderConstraint')
		for node in nodes:
			# a constrained object is one attached to the rotate plug
			constrainedObjects = cmds.listConnections('%s.rotate'%node, source=False, scn=True)
			for obj in constrainedObjects:
				util.addAttributeValues(obj, node, attributeList)
	except: pass

def doHipConstraints():
	"""Adds user properties to objects with am_hipConstraint nodes."""
	# a list of attributes to extract
	attributeList = [u'hip', u'hipAimAxis', u'hipFrontAxis',
		u'pelvis', u'pelvisAimAxis', u'pelvisFrontAxis']
	try:
		nodes = cmds.ls(type='am_hipConstraint')
		for node in nodes:
			# a constrained object is one attached to the rotate plug
			constrainedObjects = cmds.listConnections('%s.rotate'%node, source=False, scn=True)
			for obj in constrainedObjects:
				util.addAttributeValues(obj, node, attributeList)
	except: pass