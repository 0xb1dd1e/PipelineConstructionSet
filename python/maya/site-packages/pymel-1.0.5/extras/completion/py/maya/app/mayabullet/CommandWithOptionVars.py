import maya

class CommandWithOptionVars(object):
    """
    Base class that handles Maya Commands.  Tailored for MenuItems.
     * Executes command from menu
     * Displays option box dialog
     * Gets/Sets OptionVars
    
    This is the Base Class for handling all that is needed for menuItem, the
    menuItem OptionBox w/ Dialog, and commandline calls. One can derive a class
    for individual menuItems/actions with minimal code as shown below.
    
    :Examples:
    MenuItem using prefs: CommandWithOptionVars().executeCommandCB()
    MenuItemOptionBox:    CommandWithOptionVars().createOptionDialog()
    Commandline:          CommandWithOptionVars().command()
    Cmdline w/ override:  CommandWithOptionVars().command(myoption='AAA')
    """
    
    
    
    def __init__(self):
        pass
    
    
    def addOptionDialogWidgets(self):
        """
        OVERRIDE
        Override this function to place Widgets in OptionBox Dialog
        Make sure to return a dict of {optionVarDictKey, (widgetClass, widget)}
        Also set  self.optionMenuGrp_labelToEnum[optionVarDictKey] = {<label> : <value>,}
        if using optionMenuGrp
        """
    
        pass
    
    
    def createOptionDialog(self, optionVarOverrideDict=None, saveOptionVars=True):
        """
        Callback for the MenuItem OptionBox.
        Create and show the Option Dialog for this command.
        Supplies the header and footer for the dialog.
        Calls `addOptionDialogWidgets` to create the widgets.
        """
    
        pass
    
    
    def executeCommandAndHideOptionBoxCB(self, miscBool=None):
        """
        Callback for "Apply and Close" Option Dialog button
        Saves the optionVars from the dialog, executes the command, and hides dialog.
        Note: Requires OptionBox Dialog to be created.
        """
    
        pass
    
    
    def executeCommandAndSaveCB(self, miscBool=None):
        """
        Callback for "Apply" Option Dialog button.
        Saves the optionVars from the dialog and executes the command.
        Note: Requires OptionBox Dialog to be created.
        """
    
        pass
    
    
    def executeCommandCB(self, miscBool=None):
        """
        Callback to be used by a menuItem.
        Performs command with the specified optionVar preferences.
        """
    
        pass
    
    
    def getOptionVars(self):
        """
        Create a dict by retrieving the optionVars, use the default value if
        optionVar not found.
        """
    
        pass
    
    
    def getWidgetValues(self):
        """
        Get the Option Dialog widget values and store them in the returned dict.
        """
    
        pass
    
    
    def hideOptionBoxCB(self, miscBool=None):
        """
        Callback for "Close" Option Dialog button
        Saves the optionVars from the dialog, and hides dialog.
        Note: Requires OptionBox Dialog to be created.
        """
    
        pass
    
    
    def optionBoxClosing(self):
        """
        OVERRIDE
        Override this function to perform any cleanup operations
        """
    
        pass
    
    
    def resetOptionBoxToDefaultsCB(self, miscBool=None):
        """
        Callback for the "Reset" Option Dialog menuitem.
        Resets the optionVars in the dialog to the Prefs default.
        Note: Requires OptionBox Dialog to be created.
        """
    
        pass
    
    
    def saveOptionBoxPreferencesCB(self, miscBool=None):
        """
        Callback for the "Save" Option Dialog menuitem.
        Saves the optionVars from the dialog
        Note: Requires OptionBox Dialog to be created.
        """
    
        pass
    
    
    def setOptionVars(self, optionVarDict):
        """
        Only set the optionVars that are non-default. Remove optionVar if value=defaultValue.
        """
    
        pass
    
    
    def setWidgetValues(self, optionVarDict):
        """
        Set the Option Dialog widget values from the supplied dict
        """
    
        pass
    
    
    def updateOptionBox(self):
        """
        OVERRIDE
        Override this function to update the opened option box based on a selection change.
        """
    
        pass
    
    
    def visibilityChangedCB(self, miscBool=None):
        """
        Callback for visibility changes to the Option Dialog.
        If no longer visible, saves the optionVars from the dialog,
        and hides dialog.
        Note: Requires OptionBox Dialog to be created.
        """
    
        pass
    
    
    def command(**kwargs):
        """
        OVERRIDE
        Override this function for the command execute.
        Specify keywords for optional parameters.
        """
    
        pass
    
    
    __dict__ = None
    
    __weakref__ = None



def retrieveOptionVars(prefix='', stripPrefix=False):
    """
    Retrieve a list of optionVars with the specified prefix
    
    :Parameters:
        prefix: filter optionVars and retrieve only those that start with the specified prefix
        stripPrefix: strip off the prefix string from the keys returned in the dict
    
    Returns:
        dict of optionVars
            
    Example: retrieveOptionVars(prefix='bullet_')
    """

    pass



logger = None


